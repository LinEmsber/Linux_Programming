===============================================================================
                                Deadlock
===============================================================================

In concurrent computing, a deadlock occurs when two competing actions wait for the other to
finish, and thus neither ever does. Deadlock is a common problem in multiprocessing systems,
parallel computing, and distributed systems, where software and hardware locks are used to
handle shared resources and implement process synchronization.


In an operating system, a deadlock occurs when a process or thread enters a waiting state because
a requested system resource is held by another waiting process, which in turn is waiting for
another resource held by another waiting process. If a process is unable to change its state
indefinitely because the resources requested by it are being used by another waiting process,
then the system is said to be in a deadlock.


In a transactional database, a deadlock occurs when two processes, each within its own transaction,
updates two rows of data (that is, records) but in the opposite order. For example, process A
updates row 1 then row 2 at the same time that process B updates row 2 then row 1. Process A can't
finish updating row 2 until process B is finished, but process B cannot finish updating row 1
until process A is finished. No matter how much time is allowed to pass, this situation will never
resolve itself. Because of this, a database management system will typically kill the transaction
of the process that has done the least amount of work.


reference:
https://en.wikipedia.org/wiki/Deadlock
